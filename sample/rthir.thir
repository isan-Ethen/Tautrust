Ok(RThir {
  params: [
      Param { 
          pat: Some(
              Pat {
                  ty: i32,
                  span: sample/test.rs:1:9: 1:10 (#0),
                  kind: Binding {
                      name: "n",
                      mode: BindingMode(No, Not),
                      var: LocalVarId(HirId(DefId(0:3 ~ test[71ef]::test).2)),
                      ty: i32,
                      subpattern: None,
                      is_primary: true
                  }
              }
          ),
          ty: i32,
          ty_span: Some(sample/test.rs:1:12: 1:15 (#0)),
          self_kind: None,
          hir_id: Some(HirId(DefId(0:3 ~ test[71ef]::test).1))
      }
  ],
  body: Some(
      RExpr {
          kind: Block {
              block: RBlock {
                  stmts: [
                      RStmt {
                          kind: Let {
                              pattern: RPat {
                                  kind: Binding {
                                      name: "m", 
                                      mode: BindingMode(No, Not),
                                      var: LocalVarId(HirId(DefId(0:3 ~ test[71ef]::test).10)),
                                      ty: i32,
                                      subpattern: None,
                                      is_primary: true
                                  },
                                  span: sample/test.rs:2:7: 2:8 (#0)
                              },
                              initializer: Some(
                                  RExpr {
                                      kind: Binary {
                                          op: Mul,
                                          lhs: RExpr {
                                              kind: VarRef {
                                                  id: LocalVarId(HirId(DefId(0:3 ~ test[71ef]::test).2))
                                              },
                                              span: sample/test.rs:2:11: 2:12 (#0)
                                          },
                                          rhs: RExpr {
                                              kind: VarRef {
                                                  id: LocalVarId(HirId(DefId(0:3 ~ test[71ef]::test).2))
                                              },
                                              span: sample/test.rs:2:15: 2:16 (#0)
                                          }
                                      }, 
                                      span: sample/test.rs:2:11: 2:16 (#0)
                                  }
                              ),
                              else_block: None,
                              span: sample/test.rs:2:3: 2:16 (#0)
                          }
                      },
                      RStmt {
                          kind: Let {
                              pattern: RPat {
                                  kind: Binding {
                                      name: "x",
                                      mode: BindingMode(No, Not),
                                      var: LocalVarId(HirId(DefId(0:3 ~ test[71ef]::test).28)),
                                      ty: (),
                                      subpattern: None,
                                      is_primary: true
                                  },
                                  span: sample/test.rs:3:7: 3:8 (#0)
                              },
                              initializer: Some(
                                  RExpr {
                                      kind: If {
                                          if_then_scope: IfThen(26),
                                          cond: RExpr {
                                              kind: Use {
                                                  source: RExpr {
                                                      kind: Unary {
                                                          op: Not,
                                                          arg: RExpr {
                                                              kind: Binary {
                                                                  op: Ge,
                                                                  lhs: RExpr {
                                                                      kind: VarRef {
                                                                          id: LocalVarId(HirId(DefId(0:3 ~ test[71ef]::test).10))
                                                                      },
                                                                      span: sample/test.rs:3:19: 3:20 (#0)
                                                                  },
                                                                  rhs: RExpr {
                                                                      kind: Literal {
                                                                          lit: Spanned {
                                                                              node: Int(Pu128(0), Unsuffixed),
                                                                              span: sample/test.rs:3:24: 3:25 (#0)
                                                                          },
                                                                          neg: false
                                                                      }, 
                                                                      span: sample/test.rs:3:24: 3:25 (#0)
                                                                  }
                                                              },
                                                              span: sample/test.rs:3:19: 3:25 (#0)
                                                          }
                                                      },
                                                      span: sample/test.rs:3:11: 3:26 (#4)
                                                  }
                                              },
                                              span: sample/test.rs:3:11: 3:26 (#7)
                                          },
                                          then: RExpr {
                                              kind: Block {
                                                  block: RBlock {
                                                      stmts: [],
                                                      expr: Some(
                                                          RExpr {
                                                              kind: NeverToAny {
                                                                  source: RExpr {
                                                                      kind: Call {
                                                                          ty: FnDef(DefId(2:9518 ~ core[e2cd]::panicking::panic), [true]),
                                                                          fun: RExpr {
                                                                              kind: ZstLiteral {
                                                                                  user_ty: None
                                                                              },
                                                                              span: sample/test.rs:3:11: 3:26 (#4)
                                                                          },
                                                                          args: [
                                                                              RExpr {
                                                                                  kind: Literal {
                                                                                      lit: Spanned {
                                                                                          node: Str("assertion failed: m >= 0", Cooked),
                                                                                          span: no-location (#0)
                                                                                      },
                                                                                      neg: false
                                                                                  },
                                                                                  span: no-location (#0)
                                                                              }
                                                                          ],
                                                                          from_hir_call: true,
                                                                          fn_span: sample/test.rs:3:11: 3:26 (#4)
                                                                      },
                                                                      span: sample/test.rs:3:11: 3:26 (#4)
                                                                  }
                                                              },
                                                              span: sample/test.rs:3:11: 3:26 (#4) 
                                                          }
                                                      )
                                                  }
                                              },
                                              span: sample/test.rs:3:11: 3:26 (#4)
                                          },
                                          else_opt: None
                                      },
                                      span: sample/test.rs:3:11: 3:26 (#4) 
                                  }
                              ),
                              else_block: None,
                              span: sample/test.rs:3:3: 3:26 (#0)
                          }
                      }
                  ],
                  expr: None
              }
          },
          span: sample/test.rs:1:17: 4:2 (#0) 
      }
  )
})
