params: [
  Param {
    param: Some(
      Pat {
        span: sample/loop.rs:1:14: 1:15 (#0)
        kind: PatKind {
          Binding {
            name: "n"
            mode: BindingMode(No, Not)
            var: LocalVarId(HirId(DefId(0:3 ~ loop[0385]::loop_expr).2))
            ty: i32
            is_primary: true
            subpattern: None
          }
        }
      }
    )
  }
]
body:
  Expr {
    span: sample/loop.rs:1:22: 8:2 (#0)
    kind: 
      Block {
        stmts: []
        expr:
          Expr {
            span: sample/loop.rs:2:3: 7:4 (#0)
            kind: 
              Loop (
                body:
                  Expr {
                    span: sample/loop.rs:2:8: 7:4 (#0)
                    kind: 
                      Block {
                        stmts: [
                          Stmt {
                            kind: Expr {
                              expr:
                                Expr {
                                  span: sample/loop.rs:3:5: 5:6 (#0)
                                  kind: 
                                    If {
                                      cond:
                                        Expr {
                                          span: sample/loop.rs:3:8: 3:14 (#4)
                                          kind: 
                                            Use {
                                              source:
                                                Expr {
                                                  span: sample/loop.rs:3:8: 3:14 (#0)
                                                  kind: 
                                                    Binary {
                                                      op: Gt
                                                      lhs:
                                                        Expr {
                                                          span: sample/loop.rs:3:8: 3:9 (#0)
                                                          kind: 
                                                            VarRef {
                                                              id: LocalVarId(HirId(DefId(0:3 ~ loop[0385]::loop_expr).2))
                                                            }
                                                        }
                                                      rhs:
                                                        Expr {
                                                          span: sample/loop.rs:3:12: 3:14 (#0)
                                                          kind: 
                                                            Literal( lit: Spanned { node: Int(Pu128(10), Unsuffixed), span: sample/loop.rs:3:12: 3:14 (#0) }, neg: false)

                                                        }
                                                    }
                                                }
                                            }
                                        }
                                      then:
                                        Expr {
                                          span: sample/loop.rs:3:15: 5:6 (#0)
                                          kind: 
                                            NeverToAny {
                                              source:
                                                Expr {
                                                  span: sample/loop.rs:3:15: 5:6 (#0)
                                                  kind: 
                                                    Block {
                                                      stmts: [
                                                        Stmt {
                                                          kind: Expr {
                                                            expr:
                                                              Expr {
                                                                span: sample/loop.rs:4:7: 4:12 (#0)
                                                                kind: 
                                                                  Break (
                                                                    label: Node(3)
                                                                  )
                                                              }
                                                          }
                                                        }
                                                      ]
                                                      expr: []
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                          }
                          Stmt {
                            kind: Expr {
                              expr:
                                Expr {
                                  span: sample/loop.rs:6:5: 6:11 (#0)
                                  kind: 
                                    AssignOp {
                                      op: Add
                                      lhs:
                                        Expr {
                                          span: sample/loop.rs:6:5: 6:6 (#0)
                                          kind: 
                                            VarRef {
                                              id: LocalVarId(HirId(DefId(0:3 ~ loop[0385]::loop_expr).2))
                                            }
                                        }
                                      rhs:
                                        Expr {
                                          span: sample/loop.rs:6:10: 6:11 (#0)
                                          kind: 
                                            Literal( lit: Spanned { node: Int(Pu128(1), Unsuffixed), span: sample/loop.rs:6:10: 6:11 (#0) }, neg: false)

                                        }
                                    }
                                }
                            }
                          }
                        ]
                        expr: []
                      }
                  }
              )
          }
      }
  }

