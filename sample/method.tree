params: [
  Param {
    param: Some(
      Pat {
        span: sample/method.rs:1:11: 1:12 (#0)
        kind: PatKind {
          Binding {
            name: "n"
            mode: BindingMode(No, Not)
            var: LocalVarId(HirId(DefId(0:3 ~ method[d9e8]::method).2))
            ty: u32
            is_primary: true
            subpattern: None
          }
        }
      }
    )
  }
]
body:
  Expr {
    span: sample/method.rs:1:19: 1:40 (#0)
    kind: 
      Block {
        stmts: [
          Stmt {
            kind: Let {
              pattern: 
                Pat {
                  span: sample/method.rs:1:25: 1:26 (#0)
                  kind: PatKind {
                    Binding {
                      name: "m"
                      mode: BindingMode(No, Not)
                      var: LocalVarId(HirId(DefId(0:3 ~ method[d9e8]::method).10))
                      ty: u32
                      is_primary: true
                      subpattern: None
                    }
                  }
                }
              ,
              initializer: Some(
                Expr {
                  span: sample/method.rs:1:29: 1:37 (#0)
                  kind: 
                    Call {
                      ty: FnDef(DefId(2:23858 ~ core[e2cd]::num::{impl#8}::pow), [true])
                      from_hir_call: true
                      fn_span: sample/method.rs:1:31: 1:37 (#0)
                      fun:
                        Expr {
                          span: sample/method.rs:1:31: 1:34 (#0)
                          kind: 
                            ZstLiteral(user_ty: None)
                        }
                      args: [
                        Expr {
                          span: sample/method.rs:1:29: 1:30 (#0)
                          kind: 
                            VarRef {
                              id: LocalVarId(HirId(DefId(0:3 ~ method[d9e8]::method).2))
                            }
                        }
                        Expr {
                          span: sample/method.rs:1:35: 1:36 (#0)
                          kind: 
                            Literal( lit: Spanned { node: Int(Pu128(3), Unsuffixed), span: sample/method.rs:1:35: 1:36 (#0) }, neg: false)

                        }
                      ]
                    }
                }
              )
              else_block: None
              span: sample/method.rs:1:21: 1:37 (#0)
            }
          }
        ]
        expr: []
      }
  }

