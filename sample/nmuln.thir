Thir { 
  body_type: Fn(fn(i32)),
  arms: [],
  blocks: [
    Block { targeted_by_break: false, region_scope: Node(24), span: sample/test.rs:3:3: 3:18 (#4), stmts: [], expr: Some(e22), safety_mode: Safe },
    Block { targeted_by_break: false, region_scope: Node(27), span: sample/test.rs:1:17: 4:2 (#0), stmts: [s0, s1], expr: None, safety_mode: Safe }
  ],
  exprs: [
    e0: Expr { kind: VarRef { id: LocalVarId(HirId(DefId(0:3 ~ test[71ef]::test).2)) }, ty: i32, temp_lifetime: Some(Node(3)), span: sample/test.rs:2:11: 2:12 (#0) },
    e1: Expr { kind: Scope { region_scope: Node(5), lint_level: Explicit(HirId(DefId(0:3 ~ test[71ef]::test).5)), value: e0 }, ty: i32, temp_lifetime: Some(Node(3)), span: sample/test.rs:2:11: 2:12 (#0) },
    e2: Expr { kind: VarRef { id: LocalVarId(HirId(DefId(0:3 ~ test[71ef]::test).2)) }, ty: i32, temp_lifetime: Some(Node(3)), span: sample/test.rs:2:15: 2:16 (#0) },
    e3: Expr { kind: Scope { region_scope: Node(7), lint_level: Explicit(HirId(DefId(0:3 ~ test[71ef]::test).7)), value: e2 }, ty: i32, temp_lifetime: Some(Node(3)), span: sample/test.rs:2:15: 2:16 (#0) },
    e4: Expr { kind: Binary { op: Mul, lhs: e1, rhs: e3 }, ty: i32, temp_lifetime: Some(Node(3)), span: sample/test.rs:2:11: 2:16 (#0) },
    e5: Expr { kind: Scope { region_scope: Node(4), lint_level: Explicit(HirId(DefId(0:3 ~ test[71ef]::test).4)), value: e4 }, ty: i32, temp_lifetime: Some(Node(3)), span: sample/test.rs:2:11: 2:16 (#0) },
    e6: Expr { kind: VarRef { id: LocalVarId(HirId(DefId(0:3 ~ test[71ef]::test).10)) }, ty: i32, temp_lifetime: Some(Node(12)), span: sample/test.rs:3:11: 3:12 (#0) },
    e7: Expr { kind: Scope { region_scope: Node(14), lint_level: Explicit(HirId(DefId(0:3 ~ test[71ef]::test).14)), value: e6 }, ty: i32, temp_lifetime: Some(Node(12)), span: sample/test.rs:3:11: 3:12 (#0) },
    e8: Expr { kind: Literal { lit: Spanned { node: Int(Pu128(0), Unsuffixed), span: sample/test.rs:3:16: 3:17 (#0) }, neg: false }, ty: i32, temp_lifetime: Some(Node(12)), span: sample/test.rs:3:16: 3:17 (#0) },
    e9: Expr { kind: Scope { region_scope: Node(16), lint_level: Explicit(HirId(DefId(0:3 ~ test[71ef]::test).16)), value: e8 }, ty: i32, temp_lifetime: Some(Node(12)), span: sample/test.rs:3:16: 3:17 (#0) },
    e10: Expr { kind: Binary { op: Ge, lhs: e7, rhs: e9 }, ty: bool, temp_lifetime: Some(Node(12)), span: sample/test.rs:3:11: 3:17 (#0) },
    e11: Expr { kind: Scope { region_scope: Node(13), lint_level: Explicit(HirId(DefId(0:3 ~ test[71ef]::test).13)), value: e10 }, ty: bool, temp_lifetime: Some(Node(12)), span: sample/test.rs:3:11: 3:17 (#0) },
    e12: Expr { kind: Unary { op: Not, arg: e11 }, ty: bool, temp_lifetime: Some(Node(12)), span: sample/test.rs:3:3: 3:18 (#4) },
    e13: Expr { kind: Scope { region_scope: Node(12), lint_level: Explicit(HirId(DefId(0:3 ~ test[71ef]::test).12)), value: e12 }, ty: bool, temp_lifetime: Some(Node(12)), span: sample/test.rs:3:3: 3:18 (#4) },
    e14: Expr { kind: Use { source: e13 }, ty: bool, temp_lifetime: Some(Node(26)), span: sample/test.rs:3:3: 3:18 (#7) },
    e15: Expr { kind: Scope { region_scope: Node(17), lint_level: Explicit(HirId(DefId(0:3 ~ test[71ef]::test).17)), value: e14 }, ty: bool, temp_lifetime: Some(Node(26)), span: sample/test.rs:3:3: 3:18 (#7) },
    e16: Expr { kind: ZstLiteral { user_ty: None }, ty: FnDef(DefId(2:9518 ~ core[e2cd]::panicking::panic), [true]), temp_lifetime: Some(Node(25)), span: sample/test.rs:3:3: 3:18 (#4) },
    e17: Expr { kind: Scope { region_scope: Node(19), lint_level: Explicit(HirId(DefId(0:3 ~ test[71ef]::test).19)), value: e16 }, ty: FnDef(DefId(2:9518 ~ core[e2cd]::panicking::panic), [true]), temp_lifetime: Some(Node(25)), span: sample/test.rs:3:3: 3:18 (#4) },
    e18: Expr { kind: Literal { lit: Spanned { node: Str("assertion failed: m >= 0", Cooked), span: no-location (#0) }, neg: false }, ty: &'{erased} str, temp_lifetime: Some(Node(25)), span: no-location (#0) },
    e19: Expr { kind: Scope { region_scope: Node(23), lint_level: Explicit(HirId(DefId(0:3 ~ test[71ef]::test).23)), value: e18 }, ty: &'{erased} str, temp_lifetime: Some(Node(25)), span: no-location (#0) },
    e20: Expr { kind: Call { ty: FnDef(DefId(2:9518 ~ core[e2cd]::panicking::panic), [true]), fun: e17, args: [e19], from_hir_call: true, fn_span: sample/test.rs:3:3: 3:18 (#4) }, ty: !, temp_lifetime: Some(Node(25)), span: sample/test.rs:3:3: 3:18 (#4) },
    e21: Expr { kind: NeverToAny { source: e20 }, ty: (), temp_lifetime: Some(Node(25)), span: sample/test.rs:3:3: 3:18 (#4) },
    e22: Expr { kind: Scope { region_scope: Node(18), lint_level: Explicit(HirId(DefId(0:3 ~ test[71ef]::test).18)), value: e21 }, ty: (), temp_lifetime: Some(Node(25)), span: sample/test.rs:3:3: 3:18 (#4) },
    e23: Expr { kind: Block { block: b0 }, ty: (), temp_lifetime: Some(Node(25)), span: sample/test.rs:3:3: 3:18 (#4) },
    e24: Expr { kind: Scope { region_scope: Node(25), lint_level: Explicit(HirId(DefId(0:3 ~ test[71ef]::test).25)), value: e23 }, ty: (), temp_lifetime: Some(Node(25)), span: sample/test.rs:3:3: 3:18 (#4) },
    e25: Expr { kind: If { if_then_scope: IfThen(25), cond: e15, then: e24, else_opt: None }, ty: (), temp_lifetime: Some(Node(26)), span: sample/test.rs:3:3: 3:18 (#4) },
    e26: Expr { kind: Scope { region_scope: Node(11), lint_level: Explicit(HirId(DefId(0:3 ~ test[71ef]::test).11)), value: e25 }, ty: (), temp_lifetime: Some(Node(26)), span: sample/test.rs:3:3: 3:18 (#4) },
    e27: Expr { kind: Block { block: b1 }, ty: (), temp_lifetime: Some(Node(28)), span: sample/test.rs:1:17: 4:2 (#0) },
    e28: Expr { kind: Scope { region_scope: Node(28), lint_level: Explicit(HirId(DefId(0:3 ~ test[71ef]::test).28)), value: e27 }, ty: (), temp_lifetime: Some(Node(28)), span: sample/test.rs:1:17: 4:2 (#0) }
  ],
  stmts: [
    Stmt { kind: Let { remainder_scope: Remainder { block: 27, first_statement_index: 0}, init_scope: Node(3), pattern: Pat { ty: i32, span: sample/test.rs:2:7: 2:8 (#0), kind: Binding { name: "m", mode: BindingMode(No, Not), var: LocalVarId(HirId(DefId(0:3 ~ test[71ef]::test).10)), ty: i32, subpattern: None, is_primary: true } }, initializer: Some(e5), else_block: None, lint_level: Explicit(HirId(DefId(0:3 ~ test[71ef]::test).9)), span: sample/test.rs:2:3: 2:16 (#0) } },
    Stmt { kind: Expr { scope: Node(26), expr: e26 } }
  ],
  params: [
    Param { pat: Some(Pat { ty: i32, span: sample/test.rs:1:9: 1:10 (#0), kind: Binding { name: "n", mode: BindingMode(No, Not), var: LocalVarId(HirId(DefId(0:3 ~ test[71ef]::test).2)), ty: i32, subpattern: None, is_primary: true } }), ty: i32, ty_span: Some(sample/test.rs:1:12: 1:15 (#0)), self_kind: None, hir_id: Some(HirId(DefId(0:3 ~ test[71ef]::test).1)) }
  ]
}
